name: Security Scan Pipeline

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  secret-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run TruffleHog
        run: |
          mkdir -p reports
          curl -sSL https://github.com/trufflesecurity/trufflehog/releases/download/v3.6.0/trufflehog-linux-amd64 -o trufflehog
          chmod +x trufflehog
          ./trufflehog filesystem --json . > reports/trufflehog.json || true
      - uses: actions/upload-artifact@v3
        with:
          name: secret-scan-report
          path: reports/trufflehog.json

  sca:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
      - name: Run pip-audit (SCA)
        run: |
          mkdir -p reports
          pip-audit -r requirements.txt -f json -o reports/pip-audit.json || true
      - uses: actions/upload-artifact@v3
        with:
          name: sca-report
          path: reports/pip-audit.json

  sast:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Init CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  misconfig:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run hadolint
        run: |
          mkdir -p reports
          docker run --rm -i hadolint/hadolint < Dockerfile > reports/hadolint.txt || true
      - uses: actions/upload-artifact@v3
        with:
          name: hadolint-report
          path: reports/hadolint.txt

  dast:
    runs-on: ubuntu-latest
    services:
      web:
        image: docker/compose:latest
    steps:
      - uses: actions/checkout@v4
      - name: Build & Run App with docker-compose
        run: docker-compose up -d
      - name: Wait for app
        run: |
          for i in {1..10}; do
            curl -sSf http://localhost:5000 && break
            sleep 5
          done
      - name: Run OWASP ZAP Baseline
        run: |
          mkdir -p reports
          docker run --network host -v $(pwd)/reports:/zap/wrk/:rw owasp/zap2docker-stable zap-baseline.py -t http://localhost:5000 -r zap_report.html -J zap_report.json || true
      - uses: actions/upload-artifact@v3
        with:
          name: dast-report
          path: reports/*

      # Notify Discord if needed
      - name: Notify Discord (HIGH/CRITICAL)
        if: steps.vulncheck.outputs.high_or_critical_found == 'true'
        run: |
          if [ -z "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            echo "No DISCORD_WEBHOOK configured; skipping notification" >&2
            exit 0
          fi
          SUMMARY_STR=$(jq -c . summary.json)
          PAYLOAD=$(jq -n --arg repo "${{ github.repository }}" --arg url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" --arg summary "$SUMMARY_STR" '{"content": ("⚠️ *Security alert*: HIGH/CRITICAL findings in "+$repo+"\nRun: "+$url), "embeds":[{"title":"Summary","description": $summary}] }')
          curl -s -H "Content-Type: application/json" -d "$PAYLOAD" "${{ secrets.DISCORD_WEBHOOK }}"
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

      # Optionally fail the job if configured
      - name: Fail job on HIGH/CRITICAL if configured
        if: steps.vulncheck.outputs.high_or_critical_found == 'true' && env.FAIL_ON_HIGH == 'true'
        run: |
          echo "HIGH/CRITICAL found and FAIL_ON_HIGH=true -> failing job"
          exit 1

      # Tear down app
      - name: Tear down docker-compose (best-effort)
        if: always()
        run: |
          if command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
            DC="docker compose"
          elif command -v docker-compose >/dev/null 2>&1; then
            DC="docker-compose"
          else
            echo "docker compose not available; nothing to tear down"
            exit 0
          fi
          echo "Tearing down with: $DC"
          $DC down -v || true

      - name: Pipeline finished
        run: echo "Security pipeline finished. Check artifacts for reports."
