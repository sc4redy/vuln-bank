name: Security Scan Pipeline - single job

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  security-scan-all:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Prepare reports dir
        run: mkdir -p security-reports

      ####################################################
      # Secret Scanning (TruffleHog) - non-blocking
      ####################################################
      - name: Run TruffleHog (secret scanning)
        run: |
          echo "Running trufflehog (may download binary)..."
          curl -sSL https://github.com/trufflesecurity/trufflehog/releases/download/v3.6.0/trufflehog-linux-amd64 -o trufflehog || true
          chmod +x trufflehog || true
          # scan workspace filesystem and output JSON
          ./trufflehog --json filesystem . > security-reports/trufflehog.json || true

      ####################################################
      # SCA for Python (pip-audit) - non-blocking
      ####################################################
      - name: Install pip-audit and dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit || true

      - name: Run pip-audit (SCA)
        run: |
          pip-audit -r requirements.txt -f json -o security-reports/pip-audit.json || true

      ####################################################
      # SAST - CodeQL (Python)
      # CodeQL action will run its own analysis and upload SARIF
      ####################################################
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Build for CodeQL (autobuild)
        uses: github/codeql-action/autobuild@v2

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v2

      ####################################################
      # Misconfiguration - hadolint on Dockerfile
      ####################################################
      - name: Run hadolint on Dockerfile
        run: |
          # use hadolint container to lint Dockerfile
          docker run --rm -i hadolint/hadolint:2.9.0 hadolint -f json Dockerfile > security-reports/hadolint.json || true

      ####################################################
      # Build & Start app via docker-compose for DAST
      ####################################################
      - name: Build and start app with docker-compose
        run: |
          docker-compose up -d --build || true
          # wait for app to be up (port 5000 assumed)
          for i in {1..30}; do
            if curl -sSf http://localhost:5000/ >/dev/null 2>&1; then
              echo "app reachable"
              break
            fi
            echo "waiting for app to come up..."
            sleep 3
          done

      ####################################################
      # DAST - OWASP ZAP baseline scan
      ####################################################
      - name: Run OWASP ZAP baseline scan
        run: |
          mkdir -p security-reports
          # use host networking so zap can reach localhost services (linux runner)
          docker run --rm --network host -v "$(pwd)/security-reports":/zap/wrk/:rw owasp/zap2docker-stable \
            zap-baseline.py -t http://localhost:5000 -r zap_report.html -J zap_report.json || true
          # ensure files present (some runners may need host.docker.internal instead)
          ls -la security-reports || true

      ####################################################
      # Collect additional info (pip freeze, docker ps)
      ####################################################
      - name: Environment & helper outputs
        run: |
          python -V > security-reports/python_version.txt || true
          pip freeze > security-reports/pip_freeze.txt || true
          docker ps --format "{{.Names}} {{.Image}} {{.Status}}" > security-reports/docker_ps.txt || true

      ####################################################
      # Upload all reports as artifact (always)
      ####################################################
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: security-reports/**

      ####################################################
      # Tear down docker-compose (best-effort)
      ####################################################
      - name: Tear down docker-compose
        if: always()
        run: docker-compose down || true

      # Notify Discord if needed
      - name: Notify Discord (HIGH/CRITICAL)
        if: steps.vulncheck.outputs.high_or_critical_found == 'true'
        run: |
          if [ -z "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            echo "No DISCORD_WEBHOOK configured; skipping notification" >&2
            exit 0
          fi
          SUMMARY_STR=$(jq -c . summary.json)
          PAYLOAD=$(jq -n --arg repo "${{ github.repository }}" --arg url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" --arg summary "$SUMMARY_STR" '{"content": ("⚠️ *Security alert*: HIGH/CRITICAL findings in "+$repo+"\nRun: "+$url), "embeds":[{"title":"Summary","description": $summary}] }')
          curl -s -H "Content-Type: application/json" -d "$PAYLOAD" "${{ secrets.DISCORD_WEBHOOK }}"
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}

      # Optionally fail the job if configured
      - name: Fail job on HIGH/CRITICAL if configured
        if: steps.vulncheck.outputs.high_or_critical_found == 'true' && env.FAIL_ON_HIGH == 'true'
        run: |
          echo "HIGH/CRITICAL found and FAIL_ON_HIGH=true -> failing job"
          exit 1

      # Tear down app
      - name: Tear down docker-compose (best-effort)
        if: always()
        run: |
          if command -v docker >/dev/null 2>&1 && docker compose version >/dev/null 2>&1; then
            DC="docker compose"
          elif command -v docker-compose >/dev/null 2>&1; then
            DC="docker-compose"
          else
            echo "docker compose not available; nothing to tear down"
            exit 0
          fi
          echo "Tearing down with: $DC"
          $DC down -v || true

      - name: Pipeline finished
        run: echo "Security pipeline finished. Check artifacts for reports."
